import numpy as np

##Punto 1:
def calcular_probabilidades(amplitudes):
    return np.abs(amplitudes)**2 / np.sum(np.abs(amplitudes)**2)

def probabilidad_en_posicion(amplitudes, posicion):
    probabilidades = calcular_probabilidades(amplitudes)
    if 0 <= posicion < len(probabilidades):
        return probabilidades[posicion]
    else:
        raise ValueError("Posición fuera de rango")

def probabilidad_transicion(amplitudes_iniciales, nuevo_ket):
    if len(nuevo_ket) != len(amplitudes_iniciales):
        raise ValueError("El nuevo vector ket debe tener el mismo tamaño que el original.")
    
    amplitud_transicion = np.dot(amplitudes_iniciales.conj(), nuevo_ket)
    return np.abs(amplitud_transicion)**2

n_posiciones = 5
amplitudes_iniciales = np.array([1, 0, 0.5, 0, 0.3])

posicion = 2
probabilidad = probabilidad_en_posicion(amplitudes_iniciales, posicion)
print(f"Probabilidad de encontrar la partícula en la posición {posicion}: {probabilidad:.4f}")

nuevo_ket = np.array([0.5, 0.5, 0, 0, 0])
probabilidad_transicion_resultado = probabilidad_transicion(amplitudes_iniciales, nuevo_ket)
print(f"Probabilidad de transición al nuevo vector ket: {probabilidad_transicion_resultado:.4f}")



##Punto 2
# 1. Amplitud de transición
def amplitud_transicion(amplitudes_iniciales, nuevo_ket):
    if len(nuevo_ket) != len(amplitudes_iniciales):
        raise ValueError("El nuevo vector ket debe tener el mismo tamaño que el original.")
    
    amplitud = np.dot(amplitudes_iniciales.conj(), nuevo_ket)
    return np.abs(amplitud)**2

# 2. Media y varianza de un observable
def media_y_varianza(matriz_observable, ket):
    if not np.allclose(matriz_observable, matriz_observable.conj().T):
        raise ValueError("La matriz no es hermitiana.")
    
    media = np.dot(ket.conj().T, np.dot(matriz_observable, ket))
    varianza = np.dot(ket.conj().T, np.dot(matriz_observable**2, ket)) - np.abs(media)**2
    return media.real, varianza.real

# 3. Valores propios y probabilidades de transición
def valores_propios_y_probabilidades(matriz_observable):
    eigenvalores, eigenvectores = np.linalg.eig(matriz_observable)
    return eigenvalores, eigenvectores

def probabilidad_transicion_a_vectores_propios(ket, eigenvectores):
    probabilidades = []
    for vector in eigenvectores.T:
        probabilidad = np.abs(np.dot(vector.conj(), ket))**2
        probabilidades.append(probabilidad)
    return probabilidades

# 4. Dinámica del sistema
def estado_final(estado_inicial, matrices_un):
    estado = estado_inicial
    for matriz in matrices_un:
        estado = np.dot(matriz, estado)
    return estado



Punto 4.31: 
Estado final después de la medición:
[0, 0]

4.32

4.41:
def es_unitaria(matriz):
    """Verifica si una matriz es unitaria."""
    # Calculamos la conjugada transpuesta de la matriz
    conjugada_transpuesta = np.conjugate(matriz.T)
    
    # Calculamos el producto de la matriz y su conjugada transpuesta
    producto = np.dot(matriz, conjugada_transpuesta)
    
    # Comparamos el producto con la matriz identidad
    identidad = np.eye(matriz.shape[0])
    
    return np.allclose(producto, identidad)

# Definimos dos matrices de ejemplo
matriz1 = np.array([[1/np.sqrt(2), 1/np.sqrt(2)],
                    [1/np.sqrt(2), -1/np.sqrt(2)]])

matriz2 = np.array([[1, 0],
                    [0, 1]])

# Verificamos si las matrices son unitarias
son_unitarias_1 = es_unitaria(matriz1)
son_unitarias_2 = es_unitaria(matriz2)

print(f"La matriz 1 es unitaria: {son_unitarias_1}")
print(f"La matriz 2 es unitaria: {son_unitarias_2}")

# Multiplicamos las matrices
producto_matrices = np.dot(matriz1, matriz2)

# Verificamos si el producto también es unitaria
es_producto_unitario = es_unitaria(producto_matrices)

print(f"El producto de las matrices es:\n{producto_matrices}")
print(f"El producto de las matrices es unitaria: {es_producto_unitario}")

